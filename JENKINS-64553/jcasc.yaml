jenkins:

  numExecutors: 1

  log:
    recorders:
      - name: "dev"
        loggers:
          - name: "hudson"
            level: "INFO"
          - name: "jenkins"
            level: "INFO"

  disabledAdministrativeMonitors:
    - "GitHubHookRegisterProblemMonitor"
    - "jenkins.diagnostics.SecurityIsOffMonitor"
    - "jenkins.diagnostics.ControllerExecutorsAgents"
    - "jenkins.diagnostics.ControllerExecutorsNoAgents"
    - "jenkins.diagnostics.RootUrlNotSetMonitor"

  authorizationStrategy: unsecured

security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: false
  globalJobDslSecurityConfiguration:
    useScriptSecurity: false

credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              username: "github"
              description: "github-token-scan"
              id: "github"
              scope: GLOBAL
              password: "${GH_TOKEN}"



jobs:
  - script: >
      pipelineJob('update-via-cli') {
        displayName('update-via-cli')
        description('update-via-cli')
        definition {
          cps {
            sandbox(true)
            script("""
              pipeline {
                agent {
                    label('built-in')
                }
                stages {
                  stage('Retrieve job config (filter script)') {
                    steps {
                      sh(script: 'curl localhost:8080/jnlpJars/jenkins-cli.jar --output jenkins-cli.jar')
                      sh(script: 'java -jar jenkins-cli.jar -s http://localhost:8080  -webSocket get-job github-organisation | grep "script"')
                      sh(script: 'java -jar jenkins-cli.jar -s http://localhost:8080  -webSocket get-job github-organisation/maven-project | grep "<script>"')
                    }
                  }
                  stage('Update org folder via CLI') {
                    steps {
                      sh(script: 'java -jar jenkins-cli.jar -s http://localhost:8080  -webSocket get-job github-organisation > config.xml')
                      sh(script: \"sed -i -e 's/echo/println/g' config.xml\")
                      sh(script: 'java -jar jenkins-cli.jar -s http://localhost:8080  -webSocket update-job github-organisation < config.xml')
                    }
                  }
                  stage('Check config again (filter script)') {
                    steps {
                      sh(script: 'java -jar jenkins-cli.jar -s http://localhost:8080  -webSocket get-job github-organisation | grep "script"')
                      sh(script: 'java -jar jenkins-cli.jar -s http://localhost:8080  -webSocket get-job github-organisation/maven-project | grep "<script>"')
                    }
                  }
                }
              }
            """)
          }
        }
      }

  - script: >
      pipelineJob('seed-job') {
        displayName('seed-job')
        description('seed-job')
        definition {
          cps {
            sandbox(true)
            script("""
              pipeline {
                  agent {
                      label('built-in')
                  }
                  stages {
                      stage('Seed') {
                          steps {
                              jobDsl(failOnSeedCollision: true,
                                     lookupStrategy: 'SEED_JOB',
                                     removedConfigFilesAction: 'DELETE',
                                     removedJobAction: 'DELETE',
                                     removedViewAction: 'DELETE',
                                     scriptText: '''
                                        organizationFolder('github-organisation') {
                                            displayName('github-organisation')
                                            organizations {
                                              github {
                                                apiUri('https://api.github.com')
                                                repoOwner('jonesbusy-automation')
                                                credentialsId('github')
                                                enableAvatar(false)
                                                traits {
                                                  gitHubExcludePrivateRepositories()
                                                  gitHubExcludeArchivedRepositories()
                                                  gitHubExcludeForkedRepositories()
                                                  gitHubBranchDiscovery {
                                                    strategyId(3)
                                                  }
                                                  sourceRegexFilter {
                                                    regex('maven-project')
                                                  }
                                                  headRegexFilter {
                                                    regex('main')
                                                  }
                                                }
                                                properties {
                                                    suppressFolderAutomaticTriggering {
                                                        branches('^\$')
                                                        strategy('NONE')
                                                    }
                                                }
                                                projectFactories {
                                                    inlineDefinitionMultiBranchProjectFactory {
                                                        sandbox(true)
                                                        markerFile('pom.xml')
                                                        script('node { echo "1" }')
                                                    }
                                                }
                                              }
                                            }
                                        }
                                     '''
                                   )
                          }
                      }
                  }
              }
            """)
          }
        }
        properties {
          disableConcurrentBuilds()
        }
      }
